// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PozoristeAplikacija.Data;

#nullable disable

namespace PozoristeAplikacija.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230902202951_ChangingTheImages")]
    partial class ChangingTheImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PozoristeAplikacija.Models.Adresa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Grad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ulica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Adrese");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.KorisnikAplikacije", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("AdresaId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kontakt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresaId");

                    b.ToTable("KorisnikAplikacije");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.Pozoriste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdresaId")
                        .HasColumnType("int");

                    b.Property<string>("Fotografija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnikAplikacijeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdresaId");

                    b.HasIndex("KorisnikAplikacijeId");

                    b.ToTable("Pozorista");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.Predstava", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fotografija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KorisnikAplikacijeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PozoristeId")
                        .HasColumnType("int");

                    b.Property<string>("Rezija")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tekst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trajanje")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaPredstave")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikAplikacijeId");

                    b.HasIndex("PozoristeId");

                    b.ToTable("Predstave");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.Rezervacija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenaKarte")
                        .HasColumnType("int");

                    b.Property<string>("KorisnikAplikacijeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Placeno")
                        .HasColumnType("bit");

                    b.Property<int?>("PredstavaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VremeIzvodjenja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikAplikacijeId");

                    b.HasIndex("PredstavaId");

                    b.ToTable("Rezervacije");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.KorisnikAplikacije", b =>
                {
                    b.HasOne("PozoristeAplikacija.Models.Adresa", "Adresa")
                        .WithMany()
                        .HasForeignKey("AdresaId");

                    b.Navigation("Adresa");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.Pozoriste", b =>
                {
                    b.HasOne("PozoristeAplikacija.Models.Adresa", "Adresa")
                        .WithMany()
                        .HasForeignKey("AdresaId");

                    b.HasOne("PozoristeAplikacija.Models.KorisnikAplikacije", "KorisnikAplikacije")
                        .WithMany()
                        .HasForeignKey("KorisnikAplikacijeId");

                    b.Navigation("Adresa");

                    b.Navigation("KorisnikAplikacije");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.Predstava", b =>
                {
                    b.HasOne("PozoristeAplikacija.Models.KorisnikAplikacije", "KorisnikAplikacije")
                        .WithMany("Predstave")
                        .HasForeignKey("KorisnikAplikacijeId");

                    b.HasOne("PozoristeAplikacija.Models.Pozoriste", "Pozoriste")
                        .WithMany()
                        .HasForeignKey("PozoristeId");

                    b.Navigation("KorisnikAplikacije");

                    b.Navigation("Pozoriste");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.Rezervacija", b =>
                {
                    b.HasOne("PozoristeAplikacija.Models.KorisnikAplikacije", "KorisnikAplikacije")
                        .WithMany("Rezervacije")
                        .HasForeignKey("KorisnikAplikacijeId");

                    b.HasOne("PozoristeAplikacija.Models.Predstava", "Predstava")
                        .WithMany()
                        .HasForeignKey("PredstavaId");

                    b.Navigation("KorisnikAplikacije");

                    b.Navigation("Predstava");
                });

            modelBuilder.Entity("PozoristeAplikacija.Models.KorisnikAplikacije", b =>
                {
                    b.Navigation("Predstave");

                    b.Navigation("Rezervacije");
                });
#pragma warning restore 612, 618
        }
    }
}
